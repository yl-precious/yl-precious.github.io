<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>docker Usage</title>
      <link href="/2019/05/11/docker-usage/"/>
      <url>/2019/05/11/docker-usage/</url>
      
        <content type="html"><![CDATA[<h2 id="how-docker-stole-my-whole-day"><a href="#how-docker-stole-my-whole-day" class="headerlink" title="how docker stole my whole day?"></a><center>how docker stole my whole day?</center></h2><h3 id="docker-安装"><a href="#docker-安装" class="headerlink" title="docker 安装"></a>docker 安装</h3><p><a href="https://github.com/NVIDIA/nvidia-docker" target="_blank" rel="noopener">Nvidia-docker安装</a></p><h3 id="docker-注册"><a href="#docker-注册" class="headerlink" title="docker 注册"></a>docker 注册</h3><ol><li><p>注册docker账户: <a href="https://www.docker.com/" target="_blank" rel="noopener">https://www.docker.com/</a></p></li><li><p>Create repository </p></li><li><p>You may push a new image to this repository using the CLI:</p><pre class=" language-bash"><code class="language-bash">docker tag local-image:tagname new-repo:tagnamedocker push new-repo:tagnameMake sure to change tagname with your desired image repository tag.</code></pre></li></ol><h3 id="docker-使用"><a href="#docker-使用" class="headerlink" title="docker 使用"></a>docker 使用</h3><ol><li><p>查看需要上传的镜像</p><pre class=" language-bash"><code class="language-bash">docker images</code></pre></li><li><p>登录到docker hub</p><pre class=" language-bash"><code class="language-bash">docker login</code></pre></li><li><p>tag修改镜像名称</p><pre class=" language-bash"><code class="language-bash">docker tag hello-world new-repo:tagname</code></pre></li><li><p>推送镜像</p><pre class=" language-bash"><code class="language-bash">docker push new-repo:tagname</code></pre></li><li><p>搜索已发布的镜像：</p><pre class=" language-bash"><code class="language-bash">docker search new-repo:tagname</code></pre></li><li><p>拉取使用镜像</p><pre class=" language-bash"><code class="language-bash">docker pull new-repo:tagname</code></pre></li></ol><h3 id="基于Dockerfile创建镜像"><a href="#基于Dockerfile创建镜像" class="headerlink" title="基于Dockerfile创建镜像"></a>基于Dockerfile创建镜像</h3><ol><li><p>导出程序依赖包，将生成的 requirements.txt 复制到docker_test里</p><pre class=" language-bash"><code class="language-bash">pip freeze <span class="token operator">></span> requirements.txt</code></pre></li><li><p>编写Dockfile， 在docker_test同目录下创建Dockfile文件，格式如下：</p><pre class=" language-bash"><code class="language-bash">FROM python:3.6MAINTAINER name  <span class="token punctuation">(</span>email<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 维护者信息</span>ADD ./docker_test /code        <span class="token comment" spellcheck="true"># 代码添加到code文件夹</span>WORKDIR /code        <span class="token comment" spellcheck="true"># 设置code文件夹是工作目录</span>RUN pip <span class="token function">install</span> -r requirements.txt        <span class="token comment" spellcheck="true"># 安装支持</span></code></pre></li><li><p>制作镜像</p><pre class=" language-bash"><code class="language-bash">docker build -t imagename Dockerfilepath <span class="token comment" spellcheck="true"># Dockerfilepath：Dockerfile 所在文件夹名称，当前名录为 “.” </span></code></pre></li><li><p>运行镜像</p><pre class=" language-bash"><code class="language-bash">docker run -d  imagename</code></pre></li></ol><h3 id="删除docker-images中None的镜像"><a href="#删除docker-images中None的镜像" class="headerlink" title="删除docker images中None的镜像"></a>删除docker images中None的镜像</h3><pre class=" language-bash"><code class="language-bash">docker stop <span class="token punctuation">$(</span>docker <span class="token function">ps</span> -a <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"Exited"</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$1</span> }'</span><span class="token punctuation">)</span> //停止容器docker <span class="token function">rm</span> <span class="token punctuation">$(</span>docker <span class="token function">ps</span> -a <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"Exited"</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$1</span> }'</span><span class="token punctuation">)</span>  //删除容器 docker rmi <span class="token punctuation">$(</span>docker images <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"none"</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$3</span>}'</span><span class="token punctuation">)</span>  //删除镜像</code></pre>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github Usage</title>
      <link href="/2019/05/11/github-usage/"/>
      <url>/2019/05/11/github-usage/</url>
      
        <content type="html"><![CDATA[<h2 id="github-上传本地文件"><a href="#github-上传本地文件" class="headerlink" title="github 上传本地文件"></a>github 上传本地文件</h2><ol><li><p>建立本地仓库 my_repo</p><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> ~/my_repo</code></pre></li><li><p>初始化</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> ~/my_repo <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> init</code></pre></li><li><p>将所有文件添加到仓库</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> add <span class="token keyword">.</span></code></pre></li><li><p>关联github仓库</p><pre><code>到github text仓库复制仓库地址(https://github.com/yl-precious/yl-precious.github.io.git)</code></pre></li><li><p>执行</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> remote add origin https://github.com/yl-precious/yl-precious.github.io.git</code></pre></li><li><p>上传本地代码</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> push -u origin master</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typora_vue</title>
      <link href="/2019/05/11/typora-vue/"/>
      <url>/2019/05/11/typora-vue/</url>
      
        <content type="html"><![CDATA[<h2 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h2><p>Typora是一款支持实时预览的 Markdown 编辑器和阅读器，支持Windows、macOS、Linux三大平台。Typora 作为一款合格的 Markdown 编辑器，支持图片、列表、表格、代码、公式、目录等功能，同时这款软件还支持（一键）动态预览功能，让一切都变得如此干净、纯粹。并且有多种主题模板。</p><h3 id="Ubuntu-18-04-Typora-安装"><a href="#Ubuntu-18-04-Typora-安装" class="headerlink" title="Ubuntu 18.04 Typora 安装"></a>Ubuntu 18.04 Typora 安装</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">wget</span> -qO - https://typora.io/linux/public-key.asc <span class="token operator">|</span> <span class="token function">sudo</span> apt-key add -<span class="token comment" spellcheck="true"># add Typora's repository</span><span class="token function">sudo</span> add-apt-repository <span class="token string">'deb https://typora.io/linux ./'</span><span class="token comment" spellcheck="true"># install typora</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> typora</code></pre><h3 id="Change-Typora-theme-to-Vue"><a href="#Change-Typora-theme-to-Vue" class="headerlink" title="Change Typora theme to Vue"></a>Change Typora theme to Vue</h3><ol><li>下载<a href="https://github.com/blinkfox/typora-vue-theme" target="_blank" rel="noopener">typora-vue-theme</a>中的vue.css、vue-dark.css文件和包含字体的vue文件夹；</li></ol><ol start="2"><li>打开 Typora，点击“偏好设置” =&gt; “打开主题文件夹”按钮，将弹出 Typora 的主题文件夹；</li></ol><ol start="3"><li>将下载好的vue.css和vue-dark.css文件和包含字体的vue文件夹放到 Typora 的主题文件夹中；</li></ol><ol start="4"><li>关闭并重新打开 Typora，从菜单栏中选择 “主题” =&gt; “Vue” 或者 “Vue Dark” 即可。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Typora </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/04/30/hello-world/"/>
      <url>/2019/04/30/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
